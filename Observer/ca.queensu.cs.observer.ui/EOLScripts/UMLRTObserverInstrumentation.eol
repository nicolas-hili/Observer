/*
 *   
 * Developers:
 * Mojtaba Bagherzadeh(mojtaba@cs.queensu.ca): Initial development
 * Nicolas Hili (hili@cs.queensu.ca): General improvement
 *
 * Before using this EOL script in standalone, make sure to set the three following parameters
 * (Open "Run/Run Configurations.../", select "EOL Program", create a configuration, and open the "parameters" tab)
 *
 * @param
 * observerPath: String
 * Set the path to the Observer UML library. It must be prefixed by any valid Eclipse URI scheme (file:, platform:/resource, and platform:plugin).
 * Examples: "file:<ObserverPath>/libraries/observer.uml" for absolute URI
 *			 "platform:resource/ca.queensu.cs.observer/libraries/observer.uml" for Eclipse-based URI 
 *
 * @param
 * method_src: String
 * Absolute path to the source file of method to be used.
 * Example: "<absolutePathTo_ca.queensu.cs.observer.methods.socket>/cpplib/src/MethodImpl.cc" to use the TCP/IP Socket communication addon
 *
  * @param
 * method_include: String
 * Absolute path to the include file of method to be used.
 * Example: "<absolutePathTo_ca.queensu.cs.observer.methods.socket>/cpplib/include/MethodImpl.hh" to use the TCP/IP Socket communication addon
 *
 * @param
 * serializer_src: String
 * Absolute path to the source file of serializer to be used.
 * Example: "<absolutePathTo_ca.queensu.cs.observer.serializers.text>/cpplib/src/SerializerImpl.cc" to use the text serialization addon
 *
 * @param
 * serializer_include: String
 * Absolute path to the include file of serializer to be used.
 * Example: "<absolutePathTo_ca.queensu.cs.observer.serializers.text>/cpplib/include/SerializerImpl.hh" to use the text serialization addon
 *
 * @param
 * unobserved_capsules: String
 * Coma-separated list of capsule names that will be ignored during the transformation process
 * Example: Gen,Sensor
 *
 */

import "UMLRTQuery.eol";
import "UMLRTCodeReflection.eol";
import "UMLRTCodeGenUtil.eol";
import "UMLRTProfilesOperations.eol";
import "UMLRTElementOperation.eol";
import "DetailTracing.eol";

var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
var ecoreUtil = emfTool.ecoreUtil;

var fileSystemTool = new Native("org.eclipse.epsilon.eol.tools.FileSystemTool");

var methodCC : String = fileSystemTool.getContents(method_src);
var methodHH : String = fileSystemTool.getContents(method_include);

var serializerCC : String = fileSystemTool.getContents(serializer_src);
var serializerHH : String = fileSystemTool.getContents(serializer_include);

// The capsules to not observe
var unobservedCapsules : Sequence = unobserved_capsules.split(",");

//-----------------------------intialize variables........................................//

//
var uniqueId:Integer=0; // manages the generation of unique id for the name of the elements
var instrumentPrefix:String="Observation__"; // use as a prefix for the  generated variables' name
var generationPrefix="__Generated__";  // used for consistent naming
var endLine:String="\n";  // end of line character
var uniqueID:Integer=1; // we need to name the added state and transition uniquely
var Observarion:String="Observation"; 
var ObserverProtocalName:String="Observation";
var traceType:String="Observation"; // type of tracing 
var debugLevel:Integer=0; // 0= info , 1= debug at frist level functions 2= debug at second level and 3= debug at thirth level 
var currentCapsuleName:String=""; // refers the the the capsule that passed for instrumentation
var ObserverCapsuleName:String="Observer";
var eventClassName:String="Event";
var steeringEventName="steer";
var steeringEvent;
var rtsBaseCommProtocol;
var activePorts:Set;
var observationPortName="observation";
var observationPort;
var observationProtocol;
var eventSignalName:String="event"; // used for code generation;
var eventClassName:String="event";
var triggerCount:Integer=0;
var addedTrigger:Integer=0;
//-----------------------------loading user models, gateway model, debug protocol........................................//

// Load the standard UML primitive types library (work in standalone)
// See https://www.eclipse.org/forums/index.php/t/1074243/
var libURI = UMLRTModel.resource.uri.createURI("platform:/plugin/org.eclipse.uml2.uml.resources/libraries/UMLPrimitiveTypes.library.uml");
var libResource = UMLRTModel.resource.resourceSet.createResource(libURI);
libResource.load(null);
UMLRTModel.resource.resourceSet.resources.add(libResource);

var observerURI; 
var observerCapsule: UMLRTModel!Class;
var observerProtocol: UMLRTModel!Collaboration;

if (observerPath.isDefined()) {
	observerURI = UMLRTModel.resource.uri.createURI(observerPath);
}
else {
	observerURI = UMLRTModel.resource.uri.createURI("platform:/resource/ca.queensu.cs.observer/libraries/observer.uml");
}

var observerResource = UMLRTModel.resource.resourceSet.createResource(observerURI);
observerResource.load(null);
UMLRTModel.resource.resourceSet.resources.add(observerResource);

var UMLPrimitiveTypes=UMLRTModel!Package.all.select(c|c.name="PrimitiveTypes").first();
//var UMLRTSLIB=UMLRTModel!Package.all.select(c|c.name="UMLRT-RTS").first();
var modelroot:Model=UMLRTModel!Package.all.select(c|c.type.name="Model").first();

/// extract all state machine and capsules
var allStateMachines: Set	= modelroot.getAllStateMachines()
									   ->select(s | s.owner.name <> ObserverCapsuleName);
									   
var allClasses: Set			= modelroot.getAllOwnedClasses()
									   ->select(c | c.name <> ObserverCapsuleName and c.name <> "EventObj");

/// Get top capsule
var topCapsuleAnnotation = modelroot.eAnnotations.selectOne(e | e.source="UMLRT_Default_top");
var topCapsule: Class;

if (topCapsuleAnnotation.isDefined()) {
	topCapsule = allClasses->selectOne(c | c.name == topCapsuleAnnotation.details.first().value);
}
else {
	topCapsule = allClasses->selectOne(c | c.name == "Top");
}

if (not topCapsule.isDefined()) {
	"No top capsule defined".println();
	return;
}

allClasses.size().println("Number of capsules: ");
allStateMachines.getAllRegions().getAllStates().size().println("Number of states: ");
"".println();

var observerPackage;

//----------------------------main loop of the transformation........................................//
transaction{

	observerPackage = modelroot.packagedElement->selectOne(c | c.name == "Observation");
	if (observerPackage.isDefined()) {
		"--\nObserver has already been loaded. Start cleaning...".println();
		
		observerCapsule  = observerPackage.packagedElement->selectOne(c | c.name == "Observer" );
		observerProtocol = observerPackage.packagedElement->selectOne(c | c.name == "Observation").packagedElement.first();
		var observerProtocolPackage = observerPackage.packagedElement->selectOne(c | c.name == "Observation");
		
		"-> Deletion of the Observer capsule part in Top".println();
		delete topCapsule.ownedAttributes->selectOne(p | p.name == observerCapsule.name.toLowerCase());
		
		"-> Deletion of the MethodImpl and SerializerImpl artifacts".println();
		delete modelroot.packagedElement->selectOne(p | p.name == 'MethodImpl');
		delete modelroot.packagedElement->selectOne(p | p.name == 'SerializerImpl');
		
		// Un-instumenting the capsule	
		for (capsule in allClasses) {
		
			if (unobservedCapsules.indexOf(capsule.name) <> -1) {
				continue;
			}
			var stateMachine : UMLRTModel!StateMachine = capsule
								.ownedBehavior
								->selectOne(b | b.type.name = "StateMachine");
								
			if (not stateMachine.isDefined()) {
				// No state machine, we do not instrument
				continue;
			}
	
			capsule.name.println("-> Un-instrumentation of capsule: ");	
			capsule.uninstrumentStateMachine(stateMachine);
			capsule.uninstrumentStructure();
			
		}
		
		"-> Deletion of the Observer package".println();
		delete modelroot.packagedElement->selectOne(pe | pe.name == "Observation");
		
		"Done.\n".println();
	}	
	
	"--\nStart (re-)building".println();
	
	"-> Load observer".println();
	var copied = ecoreUtil.copyAll(observerResource.getContents());
	for(iterator in copied) {
		if(iterator.eClass().name=="Package") {
			modelroot.packagedElement.add(iterator);
		}
		else {
			modelroot.eResource().getContents().add(iterator);
		}
	}
	observerPackage = modelroot.packagedElement->selectOne(c | c.name == "Observation");
	var observerInternalPackage = observerPackage.packagedElement->selectOne(c | c.name == "internal");

	observerCapsule  = observerPackage.packagedElement->selectOne(c | c.name == "Observer" );
	observerProtocol = observerPackage.packagedElement->selectOne(c | c.name == "Observation").packagedElement.first();
	var observerProtocolPackage = observerPackage.packagedElement->selectOne(c | c.name == "Observation");
	
	/* Hack for fixing the model after copying*/
	var observerInterface: UMLRTModel!Interface = observerProtocol.getAllImplementedInterfaces().get(0);
	
	var collaborationInterface = observerProtocol.getInterfaceRealizations().get(0).contract;
	var collaborationInterfaceIO = observerProtocol.getInterfaceRealizations().get(1).contract;
	observerProtocol.getInterfaceRealizations().clear();
	
	var collaborationInterfaceRealization:		UMLRTModel!InterfaceRealization		= new UMLRTModel!InterfaceRealization;
	var collaborationInterfaceRealizationIO:	UMLRTModel!InterfaceRealization 	= new UMLRTModel!InterfaceRealization;
	
	collaborationInterfaceRealization.contract		= collaborationInterface;
	collaborationInterfaceRealizationIO.contract	= collaborationInterfaceIO;
	observerProtocol.getInterfaceRealizations().add(collaborationInterfaceRealization);
	observerProtocol.getInterfaceRealizations().add(collaborationInterfaceRealizationIO);
	
	"-> Add the Observer capsule part".println();
	var observerProperty = new UMLRTModel!Property();
	observerProperty.type = observerCapsule;
	observerProperty.name = observerCapsule.name.toLowerCase();
	topCapsule.ownedAttributes.add(observerProperty);
	observerProperty.aggregation = (UMLRTModel!AggregationKind#composite);
	observerProperty.applyUMLRTStereotype(modelroot);
	
	"Done.\n".println();
	
	"-> Add the serializer artifact".println();
	var serializerArtifact = new UMLRTModel!Artifact();
	serializerArtifact.name = 'SerializerImpl';
	modelroot.getPackagedElements().add(serializerArtifact);
	var serializerStereotype : Stereotype = serializerArtifact.applyUMLRTStereotype(modelroot);
	serializerArtifact.setValue(serializerStereotype, "includeFile", serializerHH);
	serializerArtifact.setValue(serializerStereotype, "sourceFile", serializerCC);
	"Done.\n".println();
	
	"-> Add the method artifact".println();
	var methodArtifact = new UMLRTModel!Artifact();
	methodArtifact.name = 'MethodImpl';
	modelroot.getPackagedElements().add(methodArtifact);
	var methodStereotype : Stereotype = methodArtifact.applyUMLRTStereotype(modelroot);
	methodArtifact.setValue(methodStereotype, "includeFile", methodHH);
	methodArtifact.setValue(methodStereotype, "sourceFile", methodCC);
	"Done.\n".println();
	
	// Add stereotype

	// Instrument capsules	
	for (capsule in allClasses) {
	
		if (unobservedCapsules.indexOf(capsule.name) <> -1) {
			continue;
		}
		
		var stateMachine : UMLRTModel!StateMachine = capsule
							.ownedBehavior
							->selectOne(b | b.type.name = "StateMachine");
							
		if (not stateMachine.isDefined()) {
			// No state machine, we do not instrument
			continue;
		}

		capsule.name.println("-> Instrumentation of capsule: ");	
		capsule.refineStructure();
		capsule.refineStateMachine(stateMachine);
		
	} 

	"-> Instrumentation of the Observer capsule".println();
	observerCapsule.instrumentObserver();

	"Done.\n--".println();
	
	return modelroot;
	/*triggerCount.println("Number of triggers: ");
	addedTrigger.println("Number of added triggers: ");
	allClasses.size().println("Number of classes before instrument: ");
	modelroot.getAllOwnedClasses().size().println("Number of classes after instrument: ");*/
	//abort;
} 

/**
 * Return the observation port of a capsule.
 */	
operation Class getObservablePort() : Port {
	return self.ownedAttributes
				->selectOne( a | a.name = observationPortName);
}

operation  Class uninstrumentStructure() {

	/* Remove Observer port from all observable capsules */
	self.removePort(observationPortName);
	
	/* Remove sendEventMethod */
	self.removeSendEventMethod();
}

operation  Class refineStructure() {

	/* Add Observer port to all observable capsules */
	self.addPortToCapsules(observationPortName, observerProtocol, false, 1, 1, "SAP");
	
	/* Add sendEvent method */
	self.addSendEventMethod();
	
}

operation  Class uninstrumentStateMachine(sm : UMLRTModel!StateMachine) {
	
	var allStates = sm.getAllRegions()
						.getAllStates()
						->select(s | s.stateType() == "Composite" or s.stateType() == "State");
							
	var allTransitions = sm.getAllRegions()
						.getAllTransitions();
							
	/// instrument States
	for (s in allStates){
		s.cleanTraceBody("");
	}
		
	/// instrument Transitions
	for (t in allTransitions){
		t.cleanTraceBody("");
		
		// add trigger for steering
		if (t.transType()=="StoP" or t.transType()=="StoS" or  t.transType()=="StoC" or t.transType()=="CtoC") {	
			var existingTrigger : UMLRTModel!Trigger = t.trigger.first();
			/// existingTrigger.event.name=="*" case need to be handled correctly
			if (not(existingTrigger.event.name=="*") and existingTrigger.port.notEmpty())	{
				var prefix : String = self.name + "_" + existingTrigger.port.first().name + "_";		
				t.removeTrigger(self.getObservablePort());
				}
		}
	}
}

operation  Class refineStateMachine(sm : UMLRTModel!StateMachine) {

	var allStates = sm.getAllRegions()
						.getAllStates()
						->select(s | s.stateType() == "Composite" or s.stateType() == "State");
							
	var allTransitions = sm.getAllRegions()
						.getAllTransitions();
							
	/// instrument States
	for (s in allStates){
		s.addTrace(traceType);
	}
		
	/// instrument Transitions
	for (t in allTransitions){
		if (t.source.name==null)
	    	t.source.assignName();
	    if (t.target.name==null)
	    	t.target.assignName();
	    	
		t.addTrace(traceType);
		
		// add trigger for steering
		// commented to merge
/*<<<<<<< HEAD 
		if (t.transType()=="StoP" or t.transType()=="StoS" or  t.transType()=="StoC" or t.transType()=="CtoC") {
			var existingTrigger : UMLRTModel!Trigger = t.trigger.first();
			var prefix : String = self.name + "_" + existingTrigger.port.first().name + "_";		
			t.createTrigger(prefix, existingTrigger, self.getObservablePort());
=======*/
		if (t.transType()=="StoP" or t.transType()=="StoS" or  t.transType()=="StoC" or t.transType()=="CtoC") {	
		    if (t.trigger.notEmpty()){
				triggerCount=triggerCount+t.trigger.size();
				var existingTrigger : UMLRTModel!Trigger = t.trigger.first();
				/// existingTrigger.event.name=="*" case need to be handled correctly
				if (not(existingTrigger.event.name=="*") and existingTrigger.port.notEmpty())	{
					var prefix : String = self.name + "_" + existingTrigger.port.first().name + "_";	
					t.createTrigger(prefix, existingTrigger, self.getObservablePort());
					addedTrigger=addedTrigger+1;
					}
				}
//>>>>>>> some small bug fixes
		}
	}
}

operation UMLRTModel!Class instrumentObserver () {
	self.createListCapsuleMessageOperation();
	self.createTriggerCapsuleMessageOperation();
}

operation UMLRTModel!Class createListCapsuleMessageOperation () {
	var listCapsuleMessageOperation : UMLRTModel!Operation = self.ownedOperation->selectOne(op | op.name == "listCapsuleMessage");
	var behavior : UMLRTModel!OpaqueBehavior = listCapsuleMessageOperation.method->first();
	behavior.body->clear();
	var body : String = "std::string sourceName = evt.getSourceName();\n";
	for (sm in allStateMachines) { 
		// for all capsule:
		body += "if (sourceName == \""+sm.owner.name+"\") {\n";
		
		var allTransitions = sm.getAllRegions()
						.getAllTransitions();
						
		var i: Integer = 0;
		var opNames = allTransitions->select(t | t.trigger->exists(tr | tr.port->exists(p | p.name == "observation")))
									 ->collect(t | t.trigger->first())
									 ->collect(tr | tr.port->first().name + "_" + tr.event.`operation`.name)
//									 ->collect(tr | tr.event.`operation`)
//									 ->collect(op | op.name)
									 ->asSet(); // to remove duplicates

		for (opName in opNames) { 
				body += "\tevt.setParam(\""+i+"\", \""+opName+"\");\n";
				i++;
		}
		body += "}\n";
	}
	body += "return evt;";
	behavior.body.add(body);
}

operation UMLRTModel!Class createTriggerCapsuleMessageOperation () {
	var listCapsuleMessageOperation : UMLRTModel!Operation = self.ownedOperation->selectOne(op | op.name == "triggerCapsuleMessage");
	var behavior : UMLRTModel!OpaqueBehavior = listCapsuleMessageOperation.method->first();
	behavior.body->clear();
	
	var body : String = "std::map<std::string, size_t>::iterator iter;" + endLine +
    					"std::string instanceName = evt.getCapsuleInstance(); // name of the instance" + endLine +
    					"std::string capsuleType = \"\";     // name of the capsule" + endLine +
					    "std::string opName    = evt.getParam(\"operation\");" + endLine +
					    "int portIndex = -1;" + endLine +
					    "for(iter=capsules.begin(); iter!=capsules.end(); ++iter) {" + endLine +
					    "if (iter->first == instanceName) {"+endLine + 
					    "portIndex = capsules[iter->first];"+endLine +
					    "capsuleType = capsuleTypes[iter->first];"+endLine +
					    "break;"+endLine +
					    "}"+endLine +
					    "}"+endLine +
					    "// For debugging purpose"+endLine +
					    "  printf(\"instanceName = %s, capsuleType = %s, portIndex = %d\"," +
					    "      instanceName.c_str()," +
					    "      capsuleType.c_str()," +
					    "      (int)portIndex);"+endLine +
					    "if (portIndex == -1) {"+endLine +
					    "printf(\"Problem with instanceName = %s\", instanceName.c_str());" +
					    "evt.setParam(\"success\", 0);"+endLine +
					    "return evt;"+endLine +
					    "}"+endLine;
    
    
    
	for (sm in allStateMachines) { 
		// for all capsule:
		body += "if (capsuleType == \""+sm.owner.name+"\") {\n";
		
		var allTransitions = sm.getAllRegions()
						.getAllTransitions();
						
		var i: Integer = 0;
		var opNames = allTransitions->select(t | t.trigger->exists(tr | tr.port->exists(p | p.name == "observation")))
									 ->collect(t | t.trigger->first())
									 ->collect(tr | tr.port->first().name + "_" + tr.event.`operation`.name)
//									 ->collect(tr | tr.event.`operation`)
//									 ->collect(op | op.name)
									 ->asSet(); // to remove duplicate

		for (opName in opNames) { 
			body += "if (opName == \""+opName+"\") {\n";
			body += self.initComplexParameters(sm.owner.name + "_" + opName);
			body += "observation." + sm.owner.name + "_" + opName + "("+self.generateParameters(sm.owner.name + "_" + opName)+").sendAt(portIndex);\n";
			body += "evt.setParam(\"success\", 1);\n";
			body += "}\n";
		}
		body += "}\n";
	}
	body += "return evt;";
	behavior.body.add(body);
}

operation UMLRTModel!Class initComplexParameters (opName : String) : String {
	var body : String = '';
	var observerInterface: UMLRTModel!Interface = observerProtocol.getAllImplementedInterfaces().get(0);
	var p: UMLRTModel!Package = observerProtocol.getPackage();
	
	var existingOperation: UMLRTModel!Operation;
	
	for (op in observerInterface.getOwnedOperations()) {
		if (op.getName().equals(opName)) {
			existingOperation = op;
			break;
		}
	}
	
	if (existingOperation.ownedParameter->size() == 0) {
		return "";
	}
	var i = 0;
	var size = existingOperation.ownedParameter->size();
	
	for (param in existingOperation.ownedParameter) {
		var typeName = param.type.name;
		var finalValue = typeName.toLowerCase();
		if (typeName <> "Boolean" and typeName <> "Integer" and typeName <> "String" and typeName <> "Natural" and typeName <> "Real") {
			// Complex type, we need to initialize the local parameter of the Observer
			body += "init_" + finalValue + "(evt, \""+param.name+"\");\n";
		}
	}
	return body;
}

operation UMLRTModel!Class generateParameters (opName : String) : String {
	var signature : String = '';
	var observerInterface: UMLRTModel!Interface = observerProtocol.getAllImplementedInterfaces().get(0);
	var p: UMLRTModel!Package = observerProtocol.getPackage();
	
	var existingOperation: UMLRTModel!Operation;
	
	for (op in observerInterface.getOwnedOperations()) {
		if (op.getName().equals(opName)) {
			existingOperation = op;
			break;
		}
	}
	
	if (existingOperation.ownedParameter->size() == 0) {
		return "";
	}
	var i = 0;
	var size = existingOperation.ownedParameter->size();
	
	for (param in existingOperation.ownedParameter) { 
		var typeName = param.type.name;
		var finalValue = typeName.toLowerCase();
		if (typeName == "Boolean") {
			finalValue = "to_bool(evt.getParam(\""+param.name+"\"))";
		}
		else if (typeName == "Integer") {
			finalValue = "atoi(evt.getParam(\""+param.name+"\").c_str())";
		}
		else if (typeName == "String") {
			//the following code is wrong for handling string, sting can not be passed as char*, either change the getParam to return char * or fix this conversion
			/* sample code for conversion
		    char tempStr[100];
  		    sprintf(tempStr,"%s",evt.getParam("ServerName").c_str());
    			observation.Server_Slave_IAmAlive(tempStr).sendAt(portIndex);*/
			finalValue = "evt.getParam(\""+param.name+"\")";
		}
		else if (typeName == "Natural") {
			finalValue = "atof(evt.getParam(\""+param.name+"\").c_str())";
		}
		else if (typeName == "Real") {
			finalValue = "atof(evt.getParam(\""+param.name+"\").c_str())";
		}
		else {
			if(not observerCapsule.ownedAttribute->exists(attr | attr.name == finalValue)) {
				// Create an attribute within the Observer capsule to handle the creation of passive class arguments
				var attr : UMLRTModel!Property = new UMLRTModel!Property();
				attr.name = finalValue;
				attr.type = param.type;
				topCapsule.ownedAttribute.add(attr);  // Trick to avoid bug
				observerCapsule.ownedAttribute.add(attr);
				
				// Create a to_<paramName> operation within the Observer
				param.createToParamOperation();				
			}
				finalValue = "this->" + finalValue;
		}
		
		signature += finalValue;
		i++;
		if (i < size) {
			signature += ", ";
		}
	}
	return signature;
}

operation UMLRTModel!Parameter createToParamOperation () {
	
	var eventClass = observerPackage.nestedPackage->selectOne(p | p.name == "internal")
								   .packagedElement->selectOne(pe | pe.name == "Event");
								   
	var op: UMLRTModel!Operation = new UMLRTModel!Operation();
	op.name = "init_" + self.type.name.toLowerCase();
	var eventParameter = op.createOwnedParameter("evt", DataType.all.selectOne(pt|pt.name = "Integer"));
	var prefixParameter = op.createOwnedParameter("prefix", DataType.all.selectOne(pt|pt.name = "String"));
	
	var behavior: UMLRTModel!OpaqueBehavior = new UMLRTModel!OpaqueBehavior();
	behavior.name = "init_" + self.type.name.toLowerCase();
	op.method.add(behavior);
	
		
	behavior.language.add("C++");
	var body: String = "";
	body += self.type.generateAffectationForParameter(self.type.name.toLowerCase() + ".", self.name  + ".");
	//body += "return " + self.type.name.toLowerCase() + ";" + endLine;
	behavior.body.add(body);
	
	topCapsule.ownedOperation.add(op);  // Trick to avoid bug
	topCapsule.ownedBehavior.add(behavior);  // Trick to avoid bug
	observerCapsule.ownedOperation.add(op);
	observerCapsule.ownedBehavior.add(behavior);
	
	// Trick to create a parameter of type Event
	var RTCppPropertiesProfile = modelroot.profileApplication.appliedProfile.selectOne(c|c.name="RTCppProperties");
	var parameterPropertiesStereotype:UMLRTModel!Stereotype= RTCppPropertiesProfile.packagedElement.selectOne(s|s.name="ParameterProperties");
	eventParameter.applyStereotype(parameterPropertiesStereotype);
	eventParameter.setValue(parameterPropertiesStereotype, "type", "Event");
	
	prefixParameter.applyStereotype(parameterPropertiesStereotype);
	prefixParameter.setValue(parameterPropertiesStereotype, "type", "std::string");
}

operation Any generateAffectationForParameter (varPrefix : String, prefix : String): String {
	var body: String = "";
	for (attr in self.ownedAttributes) { 
		var typeName = attr.type.name;
		if (typeName == "Boolean") {
			body += varPrefix + attr.name + " = to_bool(evt.getParam(prefix + "+ "\"." + attr.name+"\").c_str());" + endLine;
		}
		else if (typeName == "Integer") {
			body += varPrefix + attr.name + " = atoi(evt.getParam(prefix + "+ "\"." + attr.name+"\").c_str());" + endLine;
		}
		// the following code does not work correctly for string variables
		else if (typeName == "String") {
			body += varPrefix + attr.name + " = evt.getParam(prefix + "+ "\"." + attr.name+"\").c_str());" + endLine;
		}
		else if (typeName == "Natural" or typeName == "Real") {
			body += varPrefix + attr.name + " = atof(evt.getParam(prefix + "+ "\"." + attr.name+"\").c_str());" + endLine;
		}
		else if (typeName == "Real") {
			body += varPrefix + attr.name + " = atof(evt.getParam(prefix + "+ "\"." + attr.name+"\").c_str());" + endLine;
		}
		else {
			// FIXME: Unchecked
			body += attr.type.generateAffectationForParameter(varPrefix+attr.name+".", prefix+attr.name+".");
		}
	}
	return body;
}